{
  // 指定需要编译文件 否则默认当前目录下除了exclude之外的所有.ts, .d.ts,.tsx 文件
  "include": ["./packages/**/src", "./packages/**/types"],
  // 指定需要编译文件 否则默认当前目录下除了exclude之外的所有.ts, .d.ts,.tsx 文件
  // "files": ["./src/**/*"],
  // 不编译某些文件
  "exclude": ["tests", "packages/**/tests"],
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // 只编译修改过的文件,这个时候会生成tsconfig.tsbuildinfo,下次编译的时候会进行对比只编译修改过的文件
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */

    // 是否编译构建引用项目,很复杂后面介绍
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */

    // 指定文件用来存储增量编译信息,默认是tsconfig.tsbuildinfo
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    "target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

    // 注意：如果未指定--lib，则会注入默认的librares列表。注入的默认库为：
    // 对于 --target ES5: DOM,ES5,ScriptHost
    // 对于 --target ES6: DOM,ES6,DOM.Iterable,ScriptHost
    // TS 绝不会在您的代码中注入polyfill,所以需要你自己制定编译lib
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */

    // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    
    // 用于指定是否启用实验性的装饰器特性
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */

    // 用于指定是否为装上去提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引用ES2015.Reflect这个库
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "module": "ESNext" /* Specify what module code is generated. */,

    // 基于rootDir目录生成到outDir目录中
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */

    // 用于选择模块解析策略，有'node'和'classic'两种类型
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,

    // import from 引入文件相对路径会基于baseUrl为相对根路径
    "baseUrl": "./packages/**/src" /* Specify the base directory to resolve non-relative module names. */,
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */

    // 创建虚拟目录，次路径下的文件将作为 import from 引入的相对根路径
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */

    // 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载
    "typeRoots": [
      "./node_modules/@types",
      "./package/**/types"
    ] /* Specify multiple folders that act like './node_modules/@types'. */,

    // types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来
    "types": [] /* Specify type package names to be included without being referenced in a source file. */,
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // 允许编译JS
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */

    // 是否检测JS的语法,例如下面的语法编辑器会报错
    // let name = 'paul';
    // console.log(name.a.b)
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */

    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // 如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件,
    // declaration和allowJs不能同时设为true
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */

    // 值为true或false，指定是否为声明文件.d.ts生成map文件
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */

    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */

    // 用来指定编译时是否生成.map文件
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */

    // 当module设置为 'amd' and 'system'的时候可以使用此命令,这样可以将ts文件打包到一个目录下
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */

    //  outDir 编译后的文件存到到哪个目录下,默认是每一个ts文件的当前目录
    "outDir": "./packages/**/bin" /* Specify an output folder for all emitted files. */,

    // 编译的时候删除注释
    // "removeComments": true,                           /* Disable emitting comments. */

    // 不生成编译文件，这个一般比较少用,这个build目录下将没有任何文件,但是会进行编译,有错误会抛出
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */

    // 是否引入npm包tslib中的辅助函数,__extends等 
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */

    // 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */

    // 用于指定调试器应该找到TypeScript文件而不是源文件的位置，这个值会被写进.map文件里
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */

    // 用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */

    // 指定是否将map文件内容和js文件编译在一个同一个js文件中，如果设为true,则map的内容会以//#soureMappingURL=开头，然后接base64字符串的形式插入在js文件底部
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */

    // 用于指定是否进一步将ts文件的内容也包含到输出文件中
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */

    // 用来指定允许从没有默认导出的模块中默认导入
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */

    // 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,

    // 不把符号链接解析为真实路径
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    // 严格模式将会打开下面的几个选项
    "strict": true /* Enable all strict type-checking options. */,

    // 不允许变量或函数参数具有隐式any类型,例如
    // function(name) {
    //   return name;
    // } */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */

    // null类型检测,const teacher: string = null;会报错
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */

    // 对函数参数进行严格逆变比较
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */

    // 严格检查bind call apply
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */

    // 此规则将验证构造函数内部初始化前后已定义的属性。
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */

    // 检测this是否隐式指定
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */

    // 使用js的严格模式,在每一个文件上部声明 use strict
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */

    // 默认false,是否检测定义了但是没使用的变量
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */

    // 用于检查是否有在函数体中没有使用的参数
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */

    // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */

    // 用于检查switch中是否有case没有使用break跳出switch
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
